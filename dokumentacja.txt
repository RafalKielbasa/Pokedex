App.js
Zawiera zarówno Routing jak i Globalny kontekst aplikacji. 
- Routing zawiera w sobie podstrony. Główny Route zawiera w sobie MainLayout - główny layout który zawiera w sobie Header, Footer i kontent podstron jako Outlet. Podstrona - pokemons/:id zawiera w sobie całą kolekcję pokemonów a id jest numerem strony w paginacji. Uważam że takie rozwiązanie jest dużo prostsze niż wielokrotne fetchowanie danych na jednej podstronie, gdyż funkcja 'fetchPokeLinks' przyjmuje jako parametr numer strony i wylicza na tej podstawie pod jaki endpoint w api ma uderzyć. Zmiana limitu obiektów na stronę równiez jest możliwa do zaaplikowania jako parametr.
- 'GlobalContext' zawiera w sobie stany logowania i listę ulubionych.
- Na podstawie stanu logowanie renderowane są przyciski w Headerze :'Logowanie/Rejestracja -> Edytuj/Wyloguj.
- Lista ulubionych 'favoritesArray'- zawiera w sobie linki pokemonów na których został kliknięty 'FavoritesButton'.
- Podstrona 'favorites' - Ustawia query na podstawie tablicy 'favoritesArray' którą pobiera z GlobalContext i z pomocą useEffect refetchuje query gdy 'favoritesarray' ulega zmianie.
- 'FavoritesButton'- jako parametr przyjmuje dane pokemona w którego kafelku jest renderowany. Z 'GlobalContext' pobiera zarówno 'favoritesArray' jak i fukcję ją modyfikującą. Komponent zawiera stan isActive który jest ustawiany na podstawie favoritesArray. Jeśli 'favoritesArray' zawiera w sobie link pokemona do którego 'FavoritesButton' jest przypisany stan jest ustawiany na true, w innym wypadku na false. Warunek ten jest przypisany do useEffect, który zależny jest od 'favoritesArray' Kliknięcie w ten przycisk indukuje ustawienie stanu 'isActive' na przeciwny, zmienia ikonkę w przycisku na przeciwną i rozpoczyna funkcję 'handleToggleFavorite'. Przycisk ten ma position: absolute, więc można go dowolnie przemieszczać wewnątrz kafelka pokemona.
'handleToggleFavorite' - jako parametry przyjmuje stan 'isActive', 'favoritesArray', 'setFavoritesArray', i dane pokemona. Z uwagi na asynchroniczność zmiany stanu 'isActive' poprzez przyciścnięcie, funkcja bazuje na starym stanie isActive z przed przyciśnięcia. W wypadku gdy isActive jest false (czyli po przyciśnięciu true) funcja dodaje do 'favoritesArray' link pokemona do którego przypisany jest przycisk. gdy isActive jest true (po przciśnięciu false) - usuwa ten link.
